---
layout: false
---

header
  h1 ヘッダー

section
  .sa.up 要素1
  .sa.up data-sa_delay="200"要素2
  .sa.up data-sa_delay="400"要素3
  .sa.up data-sa_delay="600"要素4
  .sa.up data-sa_delay="600"要素5
  .sa.up data-sa_delay="400"要素6
  .sa.up data-sa_delay="200"要素7
  .sa.up 要素8
  .sa.lr#elem9 要素9
  .sa.rl 要素10
  .sa.up        data-sa_trigger="#elem9"  要素11
  .sa.down      data-sa_trigger="#elem9"  要素12
  .sa.scaleup   data-sa_trigger="#elem15" 要素13
  .sa.scaledown data-sa_trigger="#elem15 "要素14
  .sa.rotatel#elem15 要素15
  .sa.rotater 要素16

css:
  header {
    background: #0cc;
    height: 100px;
    padding: 10px;
    margin-bottom: 10px;
    box-sizing: border-box;
  }
  section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
  }
  .sa {
    background: #09c;
    height: 200px;
  }
  .sa {
    opacity: 0;
    transition: all .5s ease;
  }
  .sa.show {
    opacity: 1;
    transform: none;
  }
  .lr { transform: translate(-100px, 0); }
  .rl { transform: translate(100px, 0); }
  .up { transform: translate(0, 100px); }
  .down { transform: translate(0, -100px); }
  .scaleup { transform: scale(.5); }
  .scaledown { transform: scale(1.5); }
  .rotatel { transform: rotate(180deg); }
  .rotater { transform: rotate(-180deg); }

javascript:
  const scroll_animation_class      = 'sa';
  const scroll_animation_show_class = 'show';
  const trigger_margin_dafault      = 300;

  let scroll_animation_elements = document.querySelectorAll(`.${scroll_animation_class}`);

  let scroll_animation_function = function() {
    let data_margin = `${scroll_animation_class}_margin`;
    let data_trigger = `${scroll_animation_class}_trigger`;
    let data_delay = `${scroll_animation_class}_delay`;

    for(let i = 0; i < scroll_animation_elements.length; i++){
      let elm = scroll_animation_elements[i];

      // デフォルトは300px、もしdata-sa_marginに値があれば、その数値に置き換える
      let trigger_margin = trigger_margin_dafault;
      if (elm.dataset[data_margin] != null) {
        trigger_margin = parseInt(elm.dataset[data_margin]);
      }

      // data-sa_trigger属性に値があれば指定の要素、無ければその要素自身の位置を判定基準にする
      let show_position = 0;
      if (elm.dataset[data_trigger]) {
        show_position = document.querySelector(elm.dataset[data_trigger]).getBoundingClientRect().top + trigger_margin;
      } else {
        show_position = elm.getBoundingClientRect().top + trigger_margin;
      }

      if (window.innerHeight > show_position) {
        // data-sa_delay があれば、その時間だけずらして表示する。
        let delay = (elm.dataset[data_delay]) ? elm.dataset[data_delay] : 0;
        setTimeout(function(index) {
          scroll_animation_elements[index].classList.add(scroll_animation_show_class);
        }.bind(null, i), delay);
      }
    }
  }
  window.addEventListener('load', scroll_animation_function);
  window.addEventListener('scroll', scroll_animation_function);
